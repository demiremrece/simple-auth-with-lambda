service: serverless-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  timeout: 300
  environment:
    USERS_TABLE: ${self:custom.tables.${self:provider.stage}}
    JWT_SECRET: ${env:JWT_SECRET}
    IS_OFFLINE: ${self:custom.isOffline.${self:provider.stage}}

functions:
  register:
    handler: src/handlers/register.handler
    events:
      - http:
          path: register
          method: post

  login:
    handler: src/handlers/login.handler
    events:
      - http:
          path: login
          method: post

  me:
    handler: src/handlers/me.handler
    events:
      - http:
          path: me
          method: get

  stats:
    handler: src/handlers/stats.handler
    events:
      - http:
          path: stats
          method: get

  health:
    handler: src/handlers/health.handler
    events:
      - http:
          path: health
          method: get

plugins:
  - serverless-offline

resources:
  Resources:
    DevUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


custom:
  # Define tables for different stages
  tables:
    dev: DevUsersTable
    prod: UsersTable

  # Define IS_OFFLINE for different stages
  isOffline:
    dev: true
    prod: false
